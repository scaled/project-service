//
// Scaled Project Service - a Scaled framework for grokking projects.
// https://github.com/scaled/project-service/blob/master/LICENSE

package scaled.project

import java.nio.file.Paths
import scaled._

/** Converts various `Project` data types to/from strings. */
object Codec extends CodecImpl(":", "#")

// some shenanigans to support old encodings (ditch in 2017)
class CodecImpl (private val idSep :String, private val rootSep :String) {
  import Project._

  /** Converts an [[Id]] to a `String`. */
  def showId (id :Id) :String = id match {
    case RepoId(repo, groupId, artId, version) => deflate("r", repo, groupId, artId, version)
    case SrcURL(vcs, url)                      => deflate("s", vcs, url)
    case PlatformId(platform, version)         => deflate("p", platform, version)
    case _ => throw new IllegalArgumentException(s"Unknown id: $id")
  }

  /** Reads an [[Id]] from `string`. `string` must be the result of a call to [[showId]]. */
  def readId (string :String) :Option[Id] = try string charAt(0) match {
    case 'r' => {
      val Array(id, repo, groupId, artifId, vers) = string.split(idSep, 5)
      Some(RepoId(repo, groupId, artifId, vers))
    }
    case 's' => {
      val Array(id, vcs, url) = string.split(idSep, 3)
      Some(SrcURL(vcs, url))
    }
    case 'p' => {
      val Array(id, platform, vers) = string.split(idSep, 3)
      Some(PlatformId(platform, vers))
    }
    case _ => None
  } catch {
    case ex :Throwable => println("Invalid Project id '$string'") ; None
  }

  /** Converts a [[Root]] to a string. */
  def showRoot (root :Root) = root.path + (if (root.testMode) rootSep+"test" else "")

  /** Reads a [[Root]] from a string generated by [[showRoot]]. */
  def readRoot (str :String) :Root = {
    val parts = str.split(rootSep)
    // handle the legacy 'true' tag for a while; maybe omit this in 2017
    val isTest = (parts.length > 1) && (parts(1) == "test" || parts(1) == "true")
    Root(Paths.get(parts(0)), isTest)
  }

  protected def deflate (k :String, data :String*) = {
    val sb = new StringBuilder(k)
    for (d <- data) sb.append(idSep).append(d)
    sb.toString
  }
}
